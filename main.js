(()=>{"use strict";class e{constructor(e,t){this.name=t,this.length=e,this.isSunk=!1,this.HP=e}hit=()=>{this.HP-=1,0===this.HP&&(this.isSunk=!0)}}class t{constructor(t){this.board=Array.from({length:10},(()=>Array(10).fill("water"))),this.carrier=new e(5,"carrier"),this.battleship=new e(4,"battleship"),this.destroyer=new e(3,"destroyer"),this.submarine=new e(3,"submarine"),this.patroller=new e(2,"patroller"),this.player=t}placeShips=(e,t,s)=>{const a=e,r=t.length,i=t.name;if("horizontal"===s){const e=a[0],t=a[1];this.board[e].fill(i,t,t+r)}else if("vertical"===s){const e=a[0],t=a[1],s=this.board.map((t=>t[e])).fill(i,t,t+r);let o=0;this.board.forEach((t=>{t[e]=s[o],o++}))}};recieveAttack=e=>{if("miss"!==this.board[e[0]][e[1]]&&"hit"!==this.board[e[0]][e[1]])if("water"===this.board[e[0]][e[1]])this.board[e[0]][e[1]]="miss";else{const t=this.board[e[0]][e[1]];this.board[e[0]][e[1]]="hit",this[Object.keys(this).find((e=>this[e].name===t))].hit(),this.checkIsGame()}};checkIsGame=()=>{!0===this.carrier.isSunk&&!0===this.battleship.isSunk&&!0===this.destroyer.isSunk&&!0===this.submarine.isSunk&&!0===this.patroller.isSunk&&this.endGame()};getAvailableMoves=()=>{const e=()=>{const t=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];return"hit"===this.board[t[0]][t[1]]||"miss"===this.board[t[0]][t[1]]?e():t};return e()};placeShipsForAI=()=>{const e=()=>this.getAvailableMoves(),t=()=>1===Math.floor(2*Math.random())?"horizontal":"vertical";this.placeShips(e(),this.carrier,t()),this.placeShips(e(),this.battleship,t()),this.placeShips(e(),this.destroyer,t()),this.placeShips(e(),this.submarine,t()),this.placeShips(e(),this.patroller,t());const s=this.board.flat(1);return 17===(()=>{let e=0;return s.forEach((t=>{"carrier"!==t&&"battleship"!==t&&"destroyer"!==t&&"submarine"!==t&&"patroller"!==t||e++})),e})()||(this.board=Array.from({length:10},(()=>Array(10).fill("water"))),this.placeShipsForAI())};endGame=()=>{console.log(`${this.player}'s all ships are under water. GG`)}}class s{static computerAttacks=e=>{const t=e.board.getAvailableMoves();e.board.recieveAttack(t)};static playerAttacks=(e,t)=>{e.board.recieveAttack(t)};constructor(e){this.name=e,this.board=new t(e)}}(class{static coordinatesWithIDs={};static getName=()=>{const e=document.querySelector(".start"),t=document.querySelector("#input-name");document.querySelector("#start-game").addEventListener("click",(()=>{const s=t.value;this.initGame(s),e.classList.add("hidden")}))};static initGame=e=>{this.createGameboards();const t=this.createPlayers(e),s=t.human,a=t.AI;a.board.placeShipsForAI(),this.placeShipsForPlayer(s),this.renderGameboardForPlayer(s),this.renderGameboardForAI(a),this.initEventListenerForSquares(s,a)};static placeShipsForPlayer=e=>{const t=document.querySelector(".place-ships");t.classList.remove("hidden");const s=document.querySelectorAll(".draggable");t.querySelectorAll(".square").forEach((e=>{e.addEventListener("drop",(e=>{e.preventDefault();const t=e.target.dataset.id;console.log(t)}))})),s.forEach((e=>{e.addEventListener("dragstart",(e=>{const t=e.target.classList[0];console.log(t)}))}))};static initEventListenerForSquares=(e,t)=>{document.querySelectorAll(".AI-square").forEach((s=>s.addEventListener("click",(()=>{if(""!==s.textContent)return;const a=s.dataset.id,r=this.findCoordinates(a);this.playOneRoundForEach(e,t,r)}))))};static createGameboards=()=>{const e=document.querySelector(".player-board"),t=document.querySelector(".AI-board"),s=document.querySelector("#place-ships-modal");for(let a=9;a>=0;a--)for(let r=0;r<=9;r++){const i=document.createElement("div"),o=document.createElement("div"),c=document.createElement("div");c.classList.add("square"),c.dataset.id=`[${a}, ${r}]`,i.classList.add("player-square"),o.classList.add("AI-square"),i.classList.add("square"),o.classList.add("square"),i.dataset.id=`player-[${a}, ${r}]`,o.dataset.id=`AI-[${a}, ${r}]`,this.coordinatesWithIDs[`player-[${a}, ${r}]`]=[a,r],this.coordinatesWithIDs[`AI-[${a}, ${r}]`]=[a,r],s.appendChild(c),e.appendChild(i),t.appendChild(o)}};static createPlayers=e=>({human:new s(e),AI:new s("AI")});static renderGameboardForPlayer=e=>{const t=e.board.board;document.querySelectorAll(".player-square").forEach((e=>{const s=e.dataset.id,a=this.findCoordinates(s);switch(t[a[0]][a[1]]){case"water":break;case"carrier":case"battleship":case"destroyer":case"submarine":case"patroller":case"hit":case"miss":e.textContent=t[a[0]][a[1]];break;default:console.log("error")}}))};static renderGameboardForAI=e=>{const t=e.board.board;document.querySelectorAll(".AI-square").forEach((e=>{const s=e.dataset.id,a=this.findCoordinates(s);switch(t[a[0]][a[1]]){case"water":case"carrier":case"battleship":case"destroyer":case"submarine":case"patroller":break;case"hit":case"miss":e.textContent=t[a[0]][a[1]];break;default:console.log("error")}}))};static findCoordinates=e=>this.coordinatesWithIDs[e];static findID=e=>Object.keys(this.coordinatesWithIDs).find((t=>this.coordinatesWithIDs[t]===e));static playOneRoundForEach=(e,t,a)=>{s.playerAttacks(t,a),this.renderGameboardForAI(t),s.computerAttacks(e),this.renderGameboardForPlayer(e)}}).getName()})();