(()=>{"use strict";class t{constructor(t,a){this.name=a,this.length=t,this.isSunk=!1,this.HP=t}hit=()=>{this.HP-=1,0===this.HP&&(this.isSunk=!0)}}class a{constructor(a){this.board=Array.from({length:10},(()=>Array(10).fill("water"))),this.carrier=new t(5,"Carrier"),this.battleship=new t(4,"Battleship"),this.destroyer=new t(3,"Destroyer"),this.submarine=new t(3,"Submarine"),this.patroller=new t(2,"Patrol Boat"),this.player=a}placeShips=(t,a,e)=>{const r=t,s=a.length,i=a.name;if("horizontal"===e){const t=r[0],a=r[1];this.board[t].fill(i,a,a+s)}else if("vertical"===e){const t=r[0],a=r[1],e=this.board.map((a=>a[t])).fill(i,a,a+s);let o=0;this.board.forEach((a=>{a[t]=e[o],o++}))}};recieveAttack=t=>{if("miss"!==this.board[t[0]][t[1]]&&"hit"!==this.board[t[0]][t[1]])if("water"===this.board[t[0]][t[1]])this.board[t[0]][t[1]]="miss";else{const a=this.board[t[0]][t[1]];this.board[t[0]][t[1]]="hit",this[Object.keys(this).find((t=>this[t].name===a))].hit(),this.checkIsGame()}};checkIsGame=()=>{!0===this.carrier.isSunk&&!0===this.battleship.isSunk&&!0===this.destroyer.isSunk&&!0===this.submarine.isSunk&&!0===this.patroller.isSunk&&this.endGame()};getAvailableMoves=()=>{const t=()=>{const a=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];return"hit"===this.board[a[0]][a[1]]||"miss"===this.board[a[0]][a[1]]?t():a};return t()};endGame=()=>{console.log(`${this.player}'s all ships are under water. GG`)}}class e{static computerAttacks=t=>{const a=t.board.getAvailableMoves();t.board.recieveAttack(a)};static playerAttacks=(t,a)=>{t.board.recieveAttack(a)};constructor(t){this.name=t,this.board=new a(t)}}(class{static coordinatesWithIDs={};static initGame=t=>{this.createGameboards();const a=this.createPlayers(t),e=a.human,r=a.AI;e.board.placeShips([0,0],r.board.carrier,"vertical"),e.board.placeShips([1,0],r.board.battleship,"vertical"),e.board.placeShips([5,2],r.board.destroyer,"vertical"),e.board.placeShips([3,0],r.board.submarine,"vertical"),e.board.placeShips([8,5],r.board.patroller,"vertical"),this.placeForAI(r),this.renderGameboardForPlayer(e),this.renderGameboardForAI(r),document.querySelectorAll(".AI-square").forEach((t=>t.addEventListener("click",(()=>{if(""!==t.textContent)return;const a=t.dataset.id,s=this.findCoordinates(a);this.playOneRoundForEach(e,r,s)}))))};static createGameboards=()=>{const t=document.querySelector(".player-board"),a=document.querySelector(".AI-board");for(let e=9;e>=0;e--)for(let r=0;r<=9;r++){const s=document.createElement("div"),i=document.createElement("div");s.classList.add("player-square"),i.classList.add("AI-square"),s.classList.add("square"),i.classList.add("square"),s.dataset.id=`player-[${e}, ${r}]`,i.dataset.id=`AI-[${e}, ${r}]`,this.coordinatesWithIDs[`player-[${e}, ${r}]`]=[e,r],this.coordinatesWithIDs[`AI-[${e}, ${r}]`]=[e,r],t.appendChild(s),a.appendChild(i)}};static createPlayers=t=>({human:new e(t),AI:new e("AI")});static placeForAI=t=>{t.board.placeShips([0,0],t.board.carrier,"horizontal"),t.board.placeShips([1,0],t.board.battleship,"horizontal"),t.board.placeShips([2,0],t.board.destroyer,"horizontal"),t.board.placeShips([3,0],t.board.submarine,"horizontal"),t.board.placeShips([8,5],t.board.patroller,"vertical")};static renderGameboardForPlayer=t=>{const a=t.board.board;document.querySelectorAll(".player-square").forEach((t=>{const e=t.dataset.id,r=this.findCoordinates(e);switch(a[r[0]][r[1]]){case"water":break;case"Carrier":case"Battleship":case"Destroyer":case"Submarine":case"Patrol Boat":case"hit":case"miss":t.textContent=a[r[0]][r[1]];break;default:console.log("error")}}))};static renderGameboardForAI=t=>{const a=t.board.board;document.querySelectorAll(".AI-square").forEach((t=>{const e=t.dataset.id,r=this.findCoordinates(e);switch(a[r[0]][r[1]]){case"water":case"Carrier":case"Battleship":case"Destroyer":case"Submarine":case"Patrol Boat":break;case"hit":case"miss":t.textContent=a[r[0]][r[1]];break;default:console.log("error")}}))};static findCoordinates=t=>this.coordinatesWithIDs[t];static findID=t=>Object.keys(this.coordinatesWithIDs).find((a=>this.coordinatesWithIDs[a]===t));static playOneRoundForEach=(t,a,r)=>{e.playerAttacks(a,r),this.renderGameboardForAI(a),e.computerAttacks(t),this.renderGameboardForPlayer(t)}}).initGame("name")})();