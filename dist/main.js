(()=>{"use strict";class t{constructor(t,a){this.name=a,this.length=t,this.isSunk=!1,this.HP=t}hit=()=>{this.HP-=1,0===this.HP&&(this.isSunk=!0)}}class a{constructor(){this.board=Array.from({length:10},(()=>Array(10).fill("water"))),this.carrier=new t(5,"Carrier"),this.battleship=new t(4,"Battleship"),this.destroyer=new t(3,"Destroyer"),this.submarine=new t(3,"Submarine"),this.patroller=new t(2,"Patrol Boat")}placeShips=(t,a,e)=>{const s=t,r=a.length,i=a.name;if("horizontal"===e){const t=s[0],a=s[1];this.board[t].fill(i,a,a+r)}else if("vertical"===e){const t=s[0],a=s[1],e=this.board.map((a=>a[t])).fill(i,a,a+r);let o=0;this.board.forEach((a=>{a[t]=e[o],o++}))}};receiveAttack=t=>{if("miss"!==this.board[t]&&"hit"!==this.board[t])if("water"===this.board[t])this.board[t]="miss";else{const a=this.board[t];this.board[t]="hit",this.find((t=>t.name===a)).hit(),checkIsGame()}};checkIsGame=()=>{this.some((t=>!0!==t.isSunk))||a.endGame()};getAvailableMoves=()=>{const t=()=>{const a=[10*Math.random(),10*Math.random()];return"hit"===this.board[a[0]][a[1]]||"miss"===this.board[a[0]][a[1]]?t():a};return t()};static endGame=()=>{console.log("'s all ships are under the water, GG")}}class e{static turn=void 0;static computerPlays=t=>{const a=t.board.getAvailableMoves();t.board.recieveAttack(a),e.turn=t.name};constructor(t){this.name=t,this.board=new a}attack=(t,a)=>{this.name===e.turn?(t.board.recieveAttack(a),e.turn="AI"):e.computerPlays(t)}}(class{static coordinatesWithIDs={};static initGame=t=>{this.createGameboards();const a=this.createPlayers(t),e=(a.human,a.AI);this.placeForAI(e),document.querySelectorAll(".square").forEach((t=>t.addEventListener("click",(()=>{const a=t.dataset.id;this.findCoordinates(a)}))))};static createGameboards=()=>{const t=document.querySelector(".player-board"),a=document.querySelector(".AI-board");for(let e=9;e>=0;e--)for(let s=0;s<=9;s++){const r=document.createElement("div"),i=document.createElement("div");r.classList.add("player-square"),i.classList.add("AI-square"),r.classList.add("square"),i.classList.add("square"),r.dataset.id=`player-[${e}, ${s}]`,i.dataset.id=`AI-[${e}, ${s}]`,this.coordinatesWithIDs[`player-[${e}, ${s}]`]=[e,s],this.coordinatesWithIDs[`AI-[${e}, ${s}]`]=[e,s],t.appendChild(r),a.appendChild(i)}};static createPlayers=t=>({human:new e(t),AI:new e("AI")});static placeForAI=t=>{t.board.placeShips([0,0],t.board.carrier,"horizontal"),t.board.placeShips([1,0],t.board.battleship,"horizontal"),t.board.placeShips([2,0],t.board.destroyer,"horizontal"),t.board.placeShips([3,0],t.board.submarine,"horizontal"),t.board.placeShips([4,0],t.board.patroller,"horizontal"),console.log(t)};static findCoordinates=t=>{console.log(this.coordinatesWithIDs[t])}}).initGame(name)})();