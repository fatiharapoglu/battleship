(()=>{"use strict";class a{constructor(a,t){this.name=t,this.length=a,this.isSunk=!1,this.HP=a}hit=()=>{this.HP-=1,0===this.HP&&(this.isSunk=!0)}}class t{constructor(){this.board=Array.from({length:10},(()=>Array(10).fill("water"))),this.carrier=new a(5,"Carrier"),this.battleship=new a(4,"Battleship"),this.destroyer=new a(3,"Destroyer"),this.submarine=new a(3,"Submarine"),this.patroller=new a(2,"Patrol Boat")}placeShips=(a,t,e)=>{const r=a,s=t.length,i=t.name;if("horizontal"===e){const a=r[0],t=r[1];this.board[a].fill(i,t,t+s)}else if("vertical"===e){const a=r[0],t=r[1],e=this.board.map((t=>t[a])).fill(i,t,t+s);let o=0;this.board.forEach((t=>{t[a]=e[o],o++}))}};receiveAttack=a=>{if("miss"!==this.board[a]&&"hit"!==this.board[a])if("water"===this.board[a])this.board[a]="miss";else{const t=this.board[a];this.board[a]="hit",this.find((a=>a.name===t)).hit(),checkIsGame()}};checkIsGame=()=>{this.some((a=>!0!==a.isSunk))||t.endGame()};getAvailableMoves=()=>{const a=()=>{const t=[10*Math.random(),10*Math.random()];return"hit"===this.board[t[0]][t[1]]||"miss"===this.board[t[0]][t[1]]?a():t};return a()};static endGame=()=>{console.log("'s all ships are under the water, GG")}}class e{static turn=void 0;static computerPlays=a=>{const t=a.board.getAvailableMoves();a.board.recieveAttack(t),e.turn=a.name};constructor(a){this.name=a,this.board=new t}attack=(a,t)=>{this.name===e.turn?(a.board.recieveAttack(t),e.turn="AI"):e.computerPlays(a)}}(class{static coordinatesWithIDs={};static initGame=a=>{this.createGameboards();const t=this.createPlayers(a),e=t.human,r=t.AI;e.board.placeShips([0,0],r.board.carrier,"vertical"),e.board.placeShips([1,0],r.board.battleship,"vertical"),e.board.placeShips([2,0],r.board.destroyer,"vertical"),e.board.placeShips([3,0],r.board.submarine,"vertical"),e.board.placeShips([8,5],r.board.patroller,"vertical"),this.placeForAI(r),this.renderGameboardForPlayer(e),document.querySelectorAll(".square").forEach((a=>a.addEventListener("click",(()=>{const t=a.dataset.id;this.findCoordinates(t),console.log(t)}))))};static createGameboards=()=>{const a=document.querySelector(".player-board"),t=document.querySelector(".AI-board");for(let e=9;e>=0;e--)for(let r=0;r<=9;r++){const s=document.createElement("div"),i=document.createElement("div");s.classList.add("player-square"),i.classList.add("AI-square"),s.classList.add("square"),i.classList.add("square"),s.dataset.id=`player-[${e}, ${r}]`,i.dataset.id=`AI-[${e}, ${r}]`,this.coordinatesWithIDs[`player-[${e}, ${r}]`]=[e,r],this.coordinatesWithIDs[`AI-[${e}, ${r}]`]=[e,r],a.appendChild(s),t.appendChild(i)}};static createPlayers=a=>({human:new e(a),AI:new e("AI")});static placeForAI=a=>{a.board.placeShips([0,0],a.board.carrier,"horizontal"),a.board.placeShips([1,0],a.board.battleship,"horizontal"),a.board.placeShips([2,0],a.board.destroyer,"horizontal"),a.board.placeShips([3,0],a.board.submarine,"horizontal"),a.board.placeShips([8,5],a.board.patroller,"vertical")};static renderGameboardForPlayer=a=>{const t=a.board.board;document.querySelectorAll(".player-square").forEach((a=>{const e=a.dataset.id,r=this.findCoordinates(e);switch(t[r[0]][r[1]]){case"water":break;case"Carrier":case"Battleship":case"Destroyer":case"Submarine":case"Patrol Boat":case"hit":case"miss":a.textContent=t[r[0]][r[1]];break;default:console.log("error")}}))};static findCoordinates=a=>this.coordinatesWithIDs[a];static findID=a=>Object.keys(this.coordinatesWithIDs).find((t=>this.coordinatesWithIDs[t]===a))}).initGame("name")})();